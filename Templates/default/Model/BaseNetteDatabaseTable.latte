{syntax double}{{$phpTag|noescape}}
namespace App{{$moduleName}}\Models;

class BaseRepository extends \Nette\Object {
    /** @var \Nette\Database\Context */
    protected $database;
    protected $table;
    protected $itemsPerPage;
    
    public function __construct($table, $itemsPerPage, $database) {
        $this->database = $database;
        $this->table = $table;
        $this->itemsPerPage = $itemsPerPage;
    }
    
    public function getAll($page, $orderBy, $orderHow, $search) {
        $t = $this->database->table($this->table);
        if ($search) {
            $search = explode(' ', $search);
            $columns = $this->database->query("SHOW COLUMNS FROM $this->table;")->fetchAll();
            $str = 'CONCAT(';
            foreach ($columns as $c) $str .= "IF($c->Field IS NULL, '', $c->Field), ";
            $str .= ')';
            foreach ($search as $s) $t->where(str_replace(', )', ')', $str) . " LIKE ?", "%$s%");
        }
        if ($orderBy && $orderHow) $t->order("$orderBy $orderHow");
        return $t->limit($this->itemsPerPage, ($page - 1) * $this->itemsPerPage);
    }

    public function get($id) { 
        return $this->database->table($this->table)->get($id);
    }
    
    public function save($args) {
		$primary = array_keys($args)[0];
		$args = array_map(function($value) { return ($value === '' || $value === 'NULL') ? NULL : $value; }, $args);
		if (isset($args[$primary]) && !empty($args[$primary])) return $this->get($args[$primary])->update($args);
		return $this->database->table($this->table)->insert($args);
    }

    public function remove($id) {
		return ($obj = $this->get($id)) ? $obj->delete() : FALSE;
    }
	
    public function getPagesCount($search) {
        $t = $this->database->table($this->table)->select('CEIL(COUNT(*) / ?) AS count', $this->itemsPerPage);
        if ($search) {
            $search = explode(' ', $search);
            $cols = $this->database->query("SHOW COLUMNS FROM $this->table;")->fetchAll();
            $str = 'CONCAT(';
            foreach ($cols as $c) $str .= "IF($c->Field IS NULL, '', $c->Field), ";
            $str .= ')';
            foreach ($search as $s) $t->where(str_replace(', )', ')', $str) . " LIKE ?", "%$s%");
        }
        return (int)$t->fetch()->count;
    }
}